https://colab.research.google.com/drive/1mV86M_ZufzMk_jV77PtcjgvPFwumilrD?usp=sharing


from collections import defaultdict
import re

class SLRParser:
    def _init_(self):
        self.grammar = {}
        self.terminals = set()
        self.non_terminals = set()
        self.lr0_items = []
        self.action_table = defaultdict(dict)
        self.goto_table = defaultdict(dict)
        self.reductions = {}
        self.start_symbol = None

    def input_grammar(self):
        n = int(input("Enter number of productions: "))
        for _ in range(n):
            line = input("Enter production (e.g., A->BC|a): ").replace(" ", "")
            lhs, rhs = line.split("->")
            rhs = rhs.split("|")
            self.grammar[lhs] = [list(self.tokenize_symbols(r)) for r in rhs]
            self.non_terminals.add(lhs)

            for production in rhs:
                for symbol in self.tokenize_symbols(production):
                    if symbol.islower() or not symbol.isalpha():
                        self.terminals.add(symbol)

        self.start_symbol = list(self.grammar.keys())[0]
        self.terminals.add("$")

        augmented_start = self.start_symbol + "'"
        self.grammar[augmented_start] = [[self.start_symbol]]
        self.start_symbol = augmented_start
        self.non_terminals.add(augmented_start)

    def tokenize_symbols(self, production):
        return re.findall(r'[A-Z]+|.', production)

    def generate_lr0_items(self):
        def closure(items):
            closure_set = set(items)
            added = True

            while added:
                added = False
                new_items = set(closure_set)

                for lhs, production, dot_pos in closure_set:
                    if dot_pos < len(production):
                        symbol = production[dot_pos]
                        if symbol in self.non_terminals:
                            for rule in self.grammar[symbol]:
                                item = (symbol, tuple(rule), 0)
                                if item not in new_items:
                                    new_items.add(item)
                                    added = True

                closure_set = new_items

            return closure_set

        def goto(state, symbol):
            next_state = set()
            for lhs, production, dot_pos in state:
                if dot_pos < len(production) and production[dot_pos] == symbol:
                    next_state.add((lhs, production, dot_pos + 1))
            return closure(next_state)

        start_item = (self.start_symbol, tuple(self.grammar[self.start_symbol][0]), 0)
        self.lr0_items = [closure({start_item})]
        states_map = {frozenset(self.lr0_items[0]): 0}

        index = 0
        while index < len(self.lr0_items):
            state = self.lr0_items[index]
            symbols = set()

            for lhs, production, dot_pos in state:
                if dot_pos < len(production):
                    symbols.add(production[dot_pos])

            for symbol in symbols:
                next_state = goto(state, symbol)
                if next_state and frozenset(next_state) not in states_map:
                    states_map[frozenset(next_state)] = len(self.lr0_items)
                    self.lr0_items.append(next_state)

            index += 1

        for state_index, state in enumerate(self.lr0_items):
            for lhs, production, dot_pos in state:
                if dot_pos < len(production):
                    symbol = production[dot_pos]
                    next_state = goto(state, symbol)
                    if symbol in self.terminals:
                        self.action_table[state_index][symbol] = f"S{states_map[frozenset(next_state)]}"
                    else:
                        self.goto_table[state_index][symbol] = states_map[frozenset(next_state)]
                else:
                    if lhs == self.start_symbol:
                        self.action_table[state_index]['$'] = 'ACC'
                    else:
                        rule_num = len(self.reductions) + 1
                        self.reductions[rule_num] = (lhs, production)
                        follow_set = self.compute_follow(lhs)
                        for terminal in follow_set:
                            self.action_table[state_index][terminal] = f"R{rule_num}"

    def compute_follow(self, symbol):
        follow_set = set()
        if symbol == self.start_symbol:
            follow_set.add("$")

        for lhs, productions in self.grammar.items():
            for production in productions:
                for i, sym in enumerate(production):
                    if sym == symbol:
                        if i + 1 < len(production):
                            next_sym = production[i + 1]
                            if next_sym in self.terminals:
                                follow_set.add(next_sym)
                        else:
                            follow_set |= self.compute_follow(lhs)
        return follow_set

# Run the parser
parser = SLRParser()
parser.input_grammar()
parser.generate_lr0_items()
